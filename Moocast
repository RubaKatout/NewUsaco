#include<bits/stdc++.h>
/*
Created By Tornado2004
*/
using namespace std;

#define debug(x) cout << '[' << #x << " is: " << x << "] " << endl;
#define imod(a , n) (a % n + n ) % n

#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define inF freopen("moocast.in","r",stdin );
#define outF freopen("moocast.out" , "w" , stdout ) ;
#define sor(v) sort(v.begin() , v.end());
#define print(v) for(auto f : v ) cout << f << " " ;
#define rsor(v) sort(v.rbegin() , v.rend());
#define rev(v) reverse(v.begin() , v.end());
#define scan(v)for(auto &it : v)cin >> it ;

#define ll long long
//#define int ll
#define logar(x , y) log(x) / log(y)
#define __sum(n) n * (n + 1) / 2
#define __lcm(a , b) a / __gcd(a , b) * b
#define pii pair<int , int >
const int N = 1e3 + 3 , K = 11 , M = N * 4 ;
const ll MOD = 998244353 , oo = 1e9 , OO = 1e18 , mod = MOD ;
const double pi = acos(-1) , eps = 1e-17 ;

//37
// (a ^ b / c ) % mod = (a ^ b ) % MOD * (c ^ (mod - 2)) % mod
// m is prime --> (a ^ m) % m = a % m


int cmp ;

int dsu[N] , sz[N] ;

int get(int u){

    if(u == dsu[u])return u ;

    return dsu[u] = get(dsu[u]);




}

void connect(int u , int v){

    u = get(u) , v = get(v);

    if(u == v)return ;

    if(sz[u] > sz[v])swap(u , v);
    dsu[u] = v ;
    sz[v] += sz[u];
    cmp -- ;



}

struct edge{

    int from , to , cst ;


    bool operator < (const edge & o)const {

        return cst < o.cst ;

    }
};

ll cost(pair<int , int > a , pair<int  , int > b){

    ll x = a.first - b.first;
    ll y = a.second - b.second ;

    return x * x + y * y ;


}


bool same(int u , int v){

    return get(u) == get(v);

}
int32_t main()
{   //inF;
   inF;outF;
    fastio;

    int n ;
    cin >> n ;


    cmp = n ;


    vector<pair<int , int > > v(n + 1);


    for(int i = 1 ; i <= n ; i ++){
        dsu[i] = i , sz[i] = 1 ;

        cin >> v[i].first >> v[i].second ;


    }

    vector<edge> edges ;


    for(int i = 1 ; i <= n ; i ++){
        for(int j = 1 ; j <= n ; j ++){
            if(i == j)continue ;


            edges.push_back({i , j , cost(v[i] , v[j]) });

        }
    }
    int mx  = 0;

    sort(edges.begin() , edges.end());

    for(auto f : edges){

        if(same(f.from , f.to))continue ;

        mx = max(mx , f.cst);
        //debug(mx)
        connect(f.from , f.to);

    }

    cout << mx;
}
