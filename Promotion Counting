#include<bits/stdc++.h>

using namespace std;

#define debug(x) cout << '[' << #x << " is: " << x << "] " << endl;
#define inF freopen("promote.in" , "r" , stdin);
#define outF freopen("promote.out" , "w" , stdout);
#define imod(a , n) (a % n + n ) % n
#define sor(v) sort(v.begin() , v.end());
#define print(v) for(auto f : v ) cout << f << " " ;
#define rsor(v) sort(v.rbegin() , v.rend());
#define rev(v) reverse(v.begin() , v.end());
#define scan(v)for(auto &it : v)cin >> it ;
#define ll long long

#define logar(x , y) log(x) / log(y)
#define __sum(n) n * (n + 1) / 2
#define __lcm(a , b) a / __gcd(a , b) * b
#define pii pair<int , int >
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);

//#define int ll

const int N =  1e5 + 3 ,  M = N * 4  , MX = 2e4 + 40;
const ll MOD = 1e9 + 7 , oo = 1e9 + 9 , OO = 1e18 , mod = MOD ;
const double pi = acos(-1) , eps = 1e-17 ;

int di[] = {1 , -1 , 0 , 0};
int dj[] = {0 , 0 , 1 , -1};

int n ;
int arr[N];
vector<int>adj[N];
int s[N] , e[N], tim , node[N];


void dfs(int u , int p){

    s[u] = tim ++;

    node[tim - 1] = u ;

    for(auto f : adj[u]){
        if(f == p)continue ;

        dfs(f , u);


    }

    e[u] = tim - 1 ;


}
vector<int> seg[N * 4];


void build(int p ,int s ,int e){


    if(s == e){

        seg[p] = {arr[node[s]]};

        return ;

    }

    int md = (s + e) / 2 ;


    build(p * 2 , s , md);
    build(p * 2 + 1 , md + 1 , e);


    merge(seg[p * 2].begin() , seg[p * 2].end() , seg[p * 2 + 1].begin() , seg[p * 2 + 1].end() , back_inserter(seg[p]));



}

int query(int p , int s , int e , int l , int r , int val){

    //selr
    if(l > e || r < s)return 0;
    //lser

    if(l <= s && r >= e){

        // 1 2 3
       // debug(seg[p][0])

        return seg[p].size() - (upper_bound(seg[p].begin() , seg[p].end() , val) - seg[p].begin());



    }

    int md = (s + e) / 2 ;

    return query(p * 2 , s , md , l , r , val) + query(p * 2 + 1 , md  +1 , e , l , r , val);



}

int32_t main()
{
    // inF;
   inF;outF;
    fastio;

    cin >> n;

    for(int i = 1 ; i <= n ; i++)cin >> arr[i];


    for(int i = 2 ; i <= n ; i++){
        int a;
        cin >> a ;
        adj[a].push_back(i);

    }

    dfs(1 , 0);



    build(1 , 0 , n - 1);


    for(int i = 1 ; i <= n; i ++){


        cout << query(1 , 0 , n - 1 , s[i], e[i], arr[i]) << '\n';

    }

}
