#include<bits/stdc++.h>
/*
Created By Tornado2004
*/
using namespace std;

#define debug(x) cout << '[' << #x << " is: " << x << "] " << endl;
#define imod(a , n) (a % n + n ) % n

#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define inF freopen("hayfeast.in","r",stdin );
#define outF freopen("hayfeast.out" , "w" , stdout ) ;
#define sor(v) sort(v.begin() , v.end());
#define print(v) for(auto f : v ) cout << f << " " ;
#define rsor(v) sort(v.rbegin() , v.rend());
#define rev(v) reverse(v.begin() , v.end());
#define scan(v)for(auto &it : v)cin >> it ;

#define ll  long long
//#define int ll
#define logar(x , y) log(x) / log(y)
#define __sum(n) n * (n + 1) / 2
#define __lcm(a , b) a / __gcd(a , b) * b
#define pii pair<int , int >
const int N = 1e5 + 5 ,  K = 11 , M = N * 4 ;
const ll MOD = 1e9 + 7 , oo = 1e9 , OO = 1e18 , mod = MOD ;
const double pi = acos(-1) , eps = 1e-18 ;

//37
// (a ^ b / c ) % mod = (a ^ b ) % MOD * (c ^ (mod - 2)) % mod
// m is prime --> (a ^ m) % m = a % m
const int di[] = {1 ,0 , -1 , 0};
const int dj[] = {0 , 1 , 0 , -1};


ll seg[M] , arr[N];
ll n , m ;


void build(int p , int s , int e){

    if(s == e){
        seg[p] = arr[s];

        return ;

    }

    int md = (s + e) / 2 ;



    build(p * 2 , s , md);
    build(p * 2 + 1 , md + 1 , e);

    seg[p] = max(seg[p * 2] , seg[p * 2 + 1]);

}

ll query(int p , int s , int e , int l , int r){

    if(l <= s && r >= e)
        return seg[p];


    if(e < l || s > r)
        return -1e18 ;



    int md = (s + e) / 2 ;



    return max(query(p * 2 , s , md , l , r) , query(p * 2 + 1 , md + 1 , e , l , r));



}









int32_t main()
{   //inF;
     inF;outF;
    fastio;

    cin >> n >> m;
    ll arr1[n + 1] = {};
    for(int i = 1 ; i <= n ; i ++){

        cin >> arr1[i] >> arr[i];


    }

    build(1 , 1 , n);


    ll mn = 1e18 ;

    ll sum = 0 ;
    int i = 1 , j = 1 ;

    while(j <= n){

        while(j <= n && sum < m ){
            sum += arr1[j ++];


        }
        if(sum >= m)j -- ;


        if(j <= n )mn = min(mn , query(1 , 1 , n , i , j));
        while(sum >= m)sum -= arr1[i ++];


        j ++ ;
    }
    cout << mn ;

}
