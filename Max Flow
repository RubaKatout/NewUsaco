#include<bits/stdc++.h>
/*
Created By Tornado2004
*/
using namespace std;

#define debug(x) cout << '[' << #x << " is: " << x << "] " << endl;
#define imod(a , n) (a % n + n ) % n

#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define inF freopen("maxflow.in","r",stdin );
#define outF freopen("maxflow.out" , "w" , stdout ) ;
#define sor(v) sort(v.begin() , v.end());
#define print(v) for(auto f : v ) cout << f << " " ;
#define rsor(v) sort(v.rbegin() , v.rend());
#define rev(v) reverse(v.begin() , v.end());
#define scan(v)for(auto &it : v)cin >> it ;

#define ll long long
#define int ll

#define logar(x , y) log(x) / log(y)

#define pii pair<int , int >
const int N = 5e4 + 4 , K = 11 , M = N * 4 ;
const ll MOD = 998244353  , oo = 1e9 , OO = 1e18 , mod = MOD ;
const double pi = acos(-1) , eps = 1e-17 ;

//37
// (a ^ b / c ) % mod = (a ^ b ) % MOD * (c ^ (mod - 2)) % mod

int di[] = {0 , 0 , 1 , -1};
int dj[] = {1 , -1 , 0 , 0};
priority_queue<pair<int , int > > q ;

int dpth[N];
vector<int> adj[N];
const int l = 17 ;

int dp[l + 1][N];

void dfs(int u , int p){

    dp[0][u] = p ;

    for(auto f : adj[u]){

        if(f != p)dpth[f] = dpth[u] + 1 , dfs(f , u)  ;

    }

}


void build(int n){
    dpth[1] = 0 ;
    memset(dp , -1 , sizeof dp);

    dfs(1 , -1);

    for(int i = 2 ; i <= n ; i ++){
        if(adj[i].size() == 1)
            q.push({dpth[i] , i});
    }

    for(int i = 1 ; i <= l ; i ++){
        for(int j = 1 ; j <= n ; j ++)
            dp[i][j] = (dp[i - 1][j] == -1 ? -1 : dp[i - 1][dp[i - 1][j]]);

    }

}

int getk(int u , int k){

    int d = dpth[u] - k ;


    for(int i = l ; i >= 0 ; i --){

        int nu = dp[i][u];

        if(nu == -1)continue ;
        if(dpth[nu] == d)return nu ;
        if(dpth[nu] > d)u = nu ;


    }

    return -1 ;


}

int lca(int a , int b){

    if(dpth[a] < dpth[b])swap(a , b);
    if(dpth[a] > dpth[b])a = getk(a , dpth[a] - dpth[b]);

    if(a == b)return a ;

    for(int i = l ; i >= 0 ; i --){

        int na = dp[i][a] , nb = dp[i][b];

        if(na == nb)continue ;
        a = na , b = nb ;


    }

    return dp[0][a];


}


int cum[N];

int inQ[N];


int32_t main()
{   //inF;
    inF;outF;
    fastio;

    int n , k ;
    cin >> n >> k;

    for(int i = 1; i < n ; i ++){
        int a , b ;
        cin >> a >> b;

        adj[a].push_back(b);
        adj[b].push_back(a);
    }








    build(n);

    while(k--){

        int a , b ;
        cin >> a >> b ;
        if(dpth[a] < dpth[b])
            swap(a , b);



        int lc = lca(a , b);

        cum[a] ++ , cum[b] ++ ;
        cum[lc] -- ;

        if(lc != 1)
            cum[dp[0][lc]] -- ;

    }



    int mx = 0 ;





    while(q.size()){

        auto tp = q.top();

        q.pop();

         mx = max(mx , cum[tp.second]);

         if(tp.first == 0)continue ;
         cum[dp[0][tp.second] ] += cum[tp.second];
         if(inQ[dp[0][tp.second]] ++)continue ;

         q.push({tp.first - 1 , dp[0][tp.second]});


    }







    cout << mx ;


}

