#include<bits/stdc++.h>
/*
Created By Tornado2004
*/
using namespace std;

#define debug(x) cout << '[' << #x << " is: " << x << "] " << endl;
#define imod(a , n) (a % n + n ) % n

#define fastio ios_base::sync_with_stdio(false);cin.tie(0);
#define inF freopen("bcount.in","r",stdin );
#define outF freopen("bcount.out" , "w" , stdout ) ;
#define sor(v) sort(v.begin() , v.end());
#define print(v) for(auto f : v ) cout << f << " " ;
#define rsor(v) sort(v.rbegin() , v.rend());
#define rev(v) reverse(v.begin() , v.end());
#define scan(v)for(auto &it : v)cin >> it ;

#define ll long long
#define logar(x , y) log(x) / log(y)
#define int ll
#define pii pair<int , int >
const int N = 1e5 + 3 , K = 11 , M = N * 4 ;
const ll MOD = 998244353  , oo = 1e9 , OO = 1e18 , mod = MOD ;
const double pi = acos(-1) , eps = 1e-17 ;

//37
// (a ^ b / c ) % mod = (a ^ b ) % MOD * (c ^ (mod - 2)) % mod

int di[] = {0 , 0 , 1 , -1};
int dj[] = {1 , -1 , 0 , 0};

int n ;
int arr[N] ;

struct data {

    int a , b , c ;
} seg[M];


void build(int p , int s , int e){

    if(s == e){

        seg[p] = {arr[s] == 1 , arr[s] == 2 , arr[s] == 3};

        return ;

    }

    int md = (s + e) / 2 ;

    build(p * 2 , s , md);
    build(p * 2 + 1 , md + 1 , e);

    seg[p].a = seg[p * 2].a + seg[p * 2 + 1].a ;
    seg[p].b = seg[p * 2].b + seg[p * 2 + 1].b;
    seg[p].c = seg[p * 2].c + seg[p * 2 + 1].c ;



}


data query(int p , int s , int e , int l , int r){
    if(s >= l && e <= r)
        return seg[p];

    if(e < l || s > r)return {};


    int md = (s + e) / 2 ;

    data q , q2;
    q = query(p * 2 , s , md , l , r) ;
    q2 = query(p * 2 + 1 , md + 1 , e , l , r);


    return {q.a + q2.a , q.b + q2.b , q.c + q2.c} ;



}
int32_t main()
{   //inF;
    inF;outF;
    fastio;
    int q ;

    cin >> n >> q;

    for(int i = 0 ;i < n; i ++)cin >> arr[i];




    build(1 , 0 , n - 1);
    while(q--){
        int l , r ;
        cin >> l >> r ;


        data q = query(1 , 0 , n - 1 , --l , -- r);

        cout << q.a << " " << q.b << " " << q.c << '\n';
    }

}
