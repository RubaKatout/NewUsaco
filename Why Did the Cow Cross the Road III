#include<bits/stdc++.h>

using namespace std;

#define debug(x) cout << '[' << #x << " is: " << x << "] " << endl;
#define inF freopen("friendcross.in" , "r" , stdin);
#define outF freopen("friendcross.out" , "w" , stdout);
#define imod(a , n) (a % n + n ) % n
#define sor(v) sort(v.begin() , v.end());
#define print(v) for(auto f : v ) cout << f << " " ;
#define rsor(v) sort(v.rbegin() , v.rend());
#define rev(v) reverse(v.begin() , v.end());
#define scan(v)for(auto &it : v)cin >> it ;
#define ll long long

#define logar(x , y) log(x) / log(y)
#define __sum(n) n * (n + 1) / 2
#define __lcm(a , b) a / __gcd(a , b) * b
#define pii pair<int , int >
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);

//#define int ll

const int N =  1e5 + 5 + 3 ,  M = N * 4  , MX = 2e4 + 40;
const ll MOD = 998244353 , oo = 1e9 + 9 , OO = 1e18 , mod = MOD ;
const double pi = acos(-1) , eps = 1e-17 ;

int di[] = {1 , -1 , 0 , 0};
int dj[] = {0 , 0 , 1 , -1};

int n , k ;
vector<int> seg[N * 4];
//map<int , int > pos[N * 4];





struct BIT{
    vector<int> v ;
    int sz ;




    int get(int i){

        int ret = 0 ;


        for(i ++ ; i ; i -= (i & -i))
            ret += v[i - 1];


        return ret ;


    }

    void update(int i , int val){

        for(i ++ ; i <= sz ; i += (i & -i))
            v[i - 1] += val ;



    }
    int query(int l , int r){

        return get(r) - get(l - 1);

    }




}    ;
BIT bit [N * 4];

int a[N] , b[N];


void build(int p , int s , int e){

    if(s == e){

        seg[p] = {a[s]};
//        pos[p][a[s]] = 0 ;
        bit[p].v.resize(1);

        return ;


    }

    int md = (s + e) / 2 ;


    build(p * 2 , s , md);

    build(p * 2 + 1 , md + 1 , e);


    bit[p].v.resize(e - s + 1);
    bit[p].sz = e- s + 1 ;

  merge(seg[p * 2].begin() , seg[p * 2].end() , seg[p * 2 + 1].begin() , seg[p * 2 + 1].end() , back_inserter(seg[p]));



}

void update(int p , int s , int e , int idx ){


    if(s == e){

    //debug(p)
        bit[p].update(0 , 1);

        //debug(bit[p].get(0))

        return ;


    }



    int md = (s + e) / 2 ;



    if(idx <= md)
        update(p * 2 , s , md , idx);
    else update(p * 2 + 1 , md + 1 , e , idx);

    int ps = lower_bound(seg[p].begin() , seg[p].end() , a[idx]) - seg[p].begin();

    bit[p].update(ps , 1);






}

int query(int p , int s , int e , int l , int r){

    //selr

    if(l > e || r <s)return 0 ;

    if(s >= l && e <= r){

        auto it = upper_bound(seg[p].begin() , seg[p].end() , a[r] + k) - seg[p].begin();
        int ret = 0;
        if(it < seg[p].size())ret = bit[p].query(it , seg[p].size() - 1);
        it = lower_bound(seg[p].begin() , seg[p].end() , a[r] - k) - seg[p].begin();

        if(it)ret += bit[p].query(0 , it - 1);



        return ret ;

    }

    int md = (s + e) / 2 ;


    return query(p * 2 , s , md , l , r) + query(p * 2 + 1 , md  +1 , e , l , r);


}


int32_t main()
{
    // inF;
    inF;outF;
    fastio;

    cin >> n >> k ;

    int ps[n + 1];

    for(int i = 0 ; i < n ; i ++){
        cin >> a[i];
        ps[a[i]] = i ;
    }


    for(int i = 0 ; i < n ; i ++)
        cin >> b[i];



    build(1 , 0 , n - 1);

    ll ans = 0 ;


    for(int i = n - 1 ; i >= 0 ; i --){
        ans += query(1 , 0 , n - 1 , 0 , ps[b[i]]);
        update(1 , 0 , n - 1 , ps[b[i]]);

        /*
        cout << "segp :  \n";
        for(int j = 1 ; j < 8 ; j ++){
            cout << "p is " << j << "  ";

            for(auto f : bit[j].v)cout << f << " " ;
            cout << endl ;
        }
        */
    }
    cout << ans ;


}
