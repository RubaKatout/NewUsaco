#include<bits/stdc++.h>

using namespace std;

#define debug(x) cout << '[' << #x << " is: " << x << "] " << endl;
#define inF freopen("balancing.in" , "r" , stdin);
#define outF freopen("balancing.out" , "w" , stdout);
#define imod(a , n) (a % n + n ) % n
#define sor(v) sort(v.begin() , v.end());
#define print(v) for(auto f : v ) cout << f << " " ;
#define rsor(v) sort(v.rbegin() , v.rend());
#define rev(v) reverse(v.begin() , v.end());
#define scan(v)for(auto &it : v)cin >> it ;
#define ll long long

#define logar(x , y) log(x) / log(y)
#define __sum(n) n * (n + 1) / 2
#define __lcm(a , b) a / __gcd(a , b) * b
#define pii pair<int , int >
#define fastio ios_base::sync_with_stdio(false);cin.tie(0);

//#define int ll

const int N =  1e6 + 6 ,  M = N * 64  , MX = 2e4 + 40;
const ll MOD = 998244353 , oo = 1e9 + 9 , OO = 1e18 , mod = MOD ;
const double pi = acos(-1) , eps = 1e-17 ;

int di[] = {1 , -1 , 0 , 0};
int dj[] = {0 , 0 , 1 , -1};



struct BIT{



    vector<int> v;


    explicit BIT(int sz){


        v.resize(sz);

    }

    void update(int i , int val ){

        for(i ++ ; i <= 1e6 ; i += (i & -i))
            v[i - 1] += val ;

    }

    int get(int i){

        int ret = 0 ;

        for(i ++ ; i   ; i -=(i & -i))
            ret += v[i - 1];


        return ret ;

    }





};

int32_t main()
{
    // inF;
    inF;outF;
    fastio;


    BIT bit(N) , bit2(N) ;

    int n ;
    cin >> n ;

    vector<pair<int , int> > v(n);



    for(auto &it : v)cin >> it.first >> it.second ;



    sort(v.begin() , v.end());


    vector<int> vec;


    for(auto f : v){
        vec.push_back(f.first + 1);
        bit2.update(f.second, 1);

    }

    int part1 = 0 , idx = 0;
    int mnans = 1e9 ;

    for(auto f : vec){

        while(idx < n && v[idx].first < f)
            part1 ++ , bit.update(v[idx].second , 1) , bit2.update(v[idx].second , -1) , idx ++ ;



        //if(f != 6)continue;
        int l = 1 , r = 1e6 / 2 , md ;

        int ans = 1e9 ;
        while(l <= r){

            md = (l + r) / 2 ;


            int a = bit.get(md * 2) , b = part1 - a ;

            int c = bit2.get(md * 2) , d = (n - part1 - c);



            int mx1 = max(a , b) , mx2 = max(c, d) ;

            if(mx1 == mx2 && a == d){
                ans = mx1 ;
                break;
            }
            ans = min(ans , max(mx1 , mx2));


            if(mx1 >= mx2){
                if(a == mx1){
                    r = md - 1 ;

                }
                else {
                    l = md + 1 ;

                }


            }

            else{
                if(c == mx2){
                    r = md - 1 ;
                }
                else {
                   l = md + 1 ;

                }


            }






        }
       // break;

      // debug(ans)
        mnans = min(mnans ,ans);
    }

    cout << mnans ;

}
